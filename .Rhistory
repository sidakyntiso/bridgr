grade.data$ta <- as.character(unlist(grade.data$grader))
ta <- unique(grade.data$ta)
len <- length(ta)
#reshape wide
for (i in ta){
grade.data[grade.data$ta==i,i] = grade.data$grade[grade.data$ta==i]
}
for (i in ta){
stdnt = grade.data$student
grd = grade.data[,i]
grade_fill = as.numeric(unlist(
lapply(unique(stdnt),function(i) min(as.numeric(grd[stdnt==i]),na.rm = T))
))
grade_fill[grade_fill %in% c(-Inf,Inf)]=NA
grade.data[,i] = as.numeric(grade_fill[match(grade.data$student,unique(stdnt))])
}
#remove irrelevant columns
grade.data <- grade.data[,c(student,grader.assigned,ta)]
grade.data <- grade.data[!duplicated(grade.data),]
#identify average of grades
grade.data$avg  <- rowMeans(grade.data[,ta],na.rm =T)
#bridging observations
grade.data$bridges =as.numeric(rowSums(!is.na(grade.data[,ta]))==len)
#identify bridges
g = nrow(grade.data[grade.data$bridges==1,])
#missing observations
grade.data$m = as.numeric((rowSums(is.na(grade.data[,ta])))==g)
#identify traditional score
core1ta<-ifelse(grade.data$grader.assigned==ta[1], grade.data[,ta[1]], NA)
for (i in c(2:len)){
core1ta<-ifelse(grade.data$grader.assigned==ta[i], grade.data[,ta[i]], core1ta)
}
grade.data$corelta <- core1ta
#identify traditional rank
grade.data$coreltapos <-rank(-as.numeric(core1ta), na.last="keep", ties.method= "average")
#Get rank of averages
grade.data$corpos<-rank(grade.data$avg, na.last="keep", ties.method= "average")
return(grade.data)
}
pre <- bridgr.data(df=bridgr.sim.data,student="student",grader.assigned = "grader.assigned",
grader="grader",grade="grade")
table(pre$bridges)
remove.packages("bridgr")
install.packages("C:/Users/Sidak Yntiso/Downloads/bridgr-master/", repos = NULL, type="source")
library(bridgr)
pre <- bridgr.data(df=bridgr.sim.data,student="student",grader.assigned = "grader.assigned",
grader="grader",grade="grade")
table(pre$bridges)
table(pre$m)
results<-bridgr(df=bridgr.sim.data,student="student",grader.assigned = "grader.assigned",
grade="grade",min_grade=NA,max_grade=NA)
########################################
###1. Evaluate the package functions ###
########################################
install.packages("C:/Users/Sidak Yntiso/Downloads/bridgr-master/", repos = NULL, type="source")
results<-bridgr(df=bridgr.sim.data,student="student",grader.assigned = "grader.assigned",
grade="grade",min_grade=NA,max_grade=NA)
remove.packages("bridgr")
rm(list = ls())
remove.packages("bridgr")
rm(list = ls())
remove.packages("bridgr")
########################################
###1. Evaluate the package functions ###
########################################
install.packages("C:/Users/Sidak Yntiso/Downloads/bridgr-master/", repos = NULL, type="source")
library(bridgr)
pre <- bridgr.data(df=bridgr.sim.data,student="student",grader.assigned = "grader.assigned",
grader="grader",grade="grade")
warnings()
remove.packages("bridgr")
rm(list = ls())
########################################
###1. Evaluate the package functions ###
########################################
install.packages("C:/Users/Sidak Yntiso/Downloads/bridgr-master/", repos = NULL, type="source")
library(bridgr)
pre <- bridgr.data(df=bridgr.sim.data,student="student",grader.assigned = "grader.assigned",
grader="grader",grade="grade")
results<-bridgr(df=bridgr.sim.data,student="student",grader.assigned = "grader.assigned",
grade="grade",min_grade=NA,max_grade=NA)
bridgr.sim.results=results
View(bridgr.sim.results)
saveRDS(bridgr.sim.results,file="C:\\Users\\Sidak Yntiso\\Downloads\\bridgr.sim.results.rds")
bridgr.sim.results <- readRDS("C:/Users/Sidak Yntiso/Downloads/bridgr-master/data/bridgr.sim.results.rds")
save(bridgr.sim.results,file="C:\\Users\\Sidak Yntiso\\Downloads\\bridgr.sim.results.RData")
bridgr.sim.results
results@data
results@[[1]]
results[[1]]
df1 = results[[1]]
students = df1$student
student_id = df1$student
corrected_grades = results[[2]]
corrected_ranks = results[[3]]
bridgr.results = list(data = df1,student_id =df1$student,
corrected_grades = coregradmeds,corrected_ranks = zmedsrank)
coregradmeds = corrected_grades
zmedsrank = corrected_ranks
bridgr.results = list(data = df1,student_id =df1$student,
corrected_grades = coregradmeds,corrected_ranks = zmedsrank)
View(bridgr.results)
bridgr.sim.results = bridgr.results
bridgr.sim.results@student_id
bridgr.sim.results$student_id
# The corrected grades are stored
head(cbind(bridgr.sim.results$student_id,bridgr.sim.results$corrected_grades)))
# The corrected grades are stored
head(cbind(bridgr.sim.results$student_id,bridgr.sim.results$corrected_grades))
rownames(coregradmeds)
row.names(coregradmeds)
coregradmeds
# The corrected grades are stored
head(data.frame(student=bridgr.sim.results$student_id,corrected_grades = bridgr.sim.results$corrected_grades))
student_id=bridgr.sim.results$student_id
corrected_grades = bridgr.sim.results$corrected_grades
head(data.frame(student_id,corrected_grades))
rownames(corrected_grades)
rownames(data.frame(corrected_grades))
names(corrected_grades)
names(student_id)
names(coregradmeds)=NA
bridgr.results = list(data = df1,student_id =df1$student,
corrected_grades = coregradmeds,corrected_ranks = zmedsrank)
bridgr.sim.results = bridgr.results
student_id=bridgr.sim.results$student_id
corrected_grades = bridgr.sim.results$corrected_grades
head(data.frame(student_id,corrected_grades))
head(data.frame(bridgr.sim.results$student_id,bridgr.sim.results$corrected_grades))
head(data.frame(student_id,corrected_grades))
plot(bridgr.sim.results$corrected_grades,bridgr.sim.results$data$corelta)
ggplot2::ggplot(aes(x=bridgr.sim.results$corrected_grades,y=bridgr.sim.results$data$corelta))+ggplot2::geom_point()
library(ggplot2)
ggplot(aes(x=bridgr.sim.results$corrected_grades,y=bridgr.sim.results$data$corelta))+ggplot2::geom_point()
ggplot(aes(x=bridgr.sim.results$corrected_grades,y=bridgr.sim.results$data$corelta))
bridgr.sim.results$data$corelta
ggplot(aes(x=bridgr.sim.results$corrected_grades,y=bridgr.sim.results$data$corelta))
ggplot(aes(x=corrected_grades,y=data$corelta),data=bridgr.sim.results)
x=bridgr.sim.results$corrected_grades
y=bridgr.sim.results$data$corelta
ggplot(aes(x=x,y=y))
dat = cbind(x,y)
head(dat)
ggplot(aes(x=x,y=y),data=dat)
ggplot(aes(x=x,y=y),data=data.frame(dat))
ggplot(aes(x=x,y=y),data=data.frame(dat))+geom_point()
ggplot(aes(x=x,y=y),data=data.frame(dat))+geom_point()+abline()
ggplot(aes(x=x,y=y),data=data.frame(dat))+geom_point()+geom_line(aes(x=x,y=x))
head(bridgr.sim.results)
names(zmedsrank)=NA
bridgr.results = list(data = df1,student_id =df1$student,
corrected_grades = coregradmeds,corrected_ranks = zmedsrank)
bridgr.sim.results = bridgr.results
View(bridgr.results)
save(bridgr.sim.results,file="C:\\Users\\Sidak Yntiso\\Downloads\\bridgr.sim.results.RData")
View(bridgr.results)
########################################
###2. Update the R documentation     ###
########################################
roxygen2::roxygenise("C:/Users/Sidak Yntiso/Downloads/bridgr-master/",clean = TRUE,
roclets=c('rd', 'collate', 'namespace'))
remove.packages("bridgr")
rm(list = ls())
install.packages("C:/Users/Sidak Yntiso/Downloads/bridgr-master/", repos = NULL, type="source")
library(bridgr)
pre <- bridgr.data(df=bridgr.sim.data,student="student",grader.assigned = "grader.assigned",
grader="grader",grade="grade")
bridgr.eval.bias(df=bridgr.sim.data,student="student",grader.assigned = "grader.assigned",
grader="grader",grade="grade")
pre <- bridgr.data(df=bridgr.sim.data,student="student",grader.assigned = "grader.assigned",
grader="grader",grade="grade")
student="student"
grader.assigned="grader.assigned"
grader="grader"
grade="grade"
df1 <- bridgr.data(df=df,student=student,grader.assigned=grader.assigned,
grader=grader,grade=grade)
#identify bridges
g = nrow(df1[df1$bridges==1,])
# create ecdf function for each TA
df1$ta = df1$grader.assigned
ta <- unique(df1$ta)
len <- length(ta)
df=bridgr.sim.data
df1 <- bridgr.data(df=df,student=student,grader.assigned=grader.assigned,
grader=grader,grade=grade)
#identify bridges
g = nrow(df1[df1$bridges==1,])
# create ecdf function for each TA
df1$ta = df1$grader.assigned
ta <- unique(df1$ta)
len <- length(ta)
# for each grader
for (i in c(1:len)){
x = ecdf(df1[[paste("ta",i,sep = "")]])
# scores for each bridging student
assign(paste("xpoints",i,sep = ""), df1[[paste("ta",i,sep = "")]][df1$bridges==1] )
# associated point on the grader's ecdf curve
assign(paste("xecdf",i,sep = ""), x(df1[[paste("ta",i,sep = "")]][df1$bridges==1]))
}
#list of scores for each bridging students
dat.list <- lapply(c(1:len), function(i) get(paste("xpoints",i,sep = "")))
#convert list to dataframe
dat  <-  as.data.frame(matrix(unlist(dat.list), nrow=length(unlist(dat.list[1]))))
colnames(dat) <- paste("ta",c(1:len),sep = "")
#reshape dataframe long
#dat1 <- dat %>% gather(ta, points, colnames(dat))
dat =data.frame(ta = unlist(lapply(ta,function(i) rep(i,g))),
points=unlist(lapply(ta, function(i) as.numeric(dat[,i]))))
View(dat.list)
df1$bridges
table(df1$bridges)
df
View(df)
View(df1)
#' \code{bridgr.data} loads grading data.
#' @param df A dataframe with grading data stored in long-format (each row corresponds to
#' a grade, with columns indicating student and grader identifiers).
#' @param grade The grade to be scaled (numeric or integer)
#' @param student Identifier for the student, exam or stimuli associated with `grade` field.
#' @param grader Identifier for the grader or section associated with the `grade` field.
#' @param grader.assigned Identifier for the student's assigned grader or section
#' @return \code{grade.data} Processed version of the provided grade data.
#' @export
#'
bridgr.data <- function(df,student,grader.assigned,grader,grade){
grade.data = df
if(!class(grade.data$grade) %in% c("integer","numeric")){
cat(message("Error in bridgr.data : object 'grade' not numeric or integer"))
}
#identify the number of graders
grade.data$ta <- as.character(unlist(grade.data$grader))
ta <- unique(grade.data$ta)
len <- length(ta)
#reshape wide
for (i in ta){
grade.data[grade.data$ta==i,i] = grade.data$grade[grade.data$ta==i]
}
for (i in ta){
stdnt = grade.data$student
grd = grade.data[,i]
grd[is.na(grd)]=-1
grade_fill = as.numeric(unlist(
lapply(unique(stdnt),function(i) min(as.numeric(grd[stdnt==i]),na.rm = T))
))
grade_fill[grade_fill %in% c(-1,-Inf,Inf)]=NA
grade.data[,i] = as.numeric(grade_fill[match(grade.data$student,unique(stdnt))])
}
#remove irrelevant columns
grade.data <- grade.data[,c(student,grader.assigned,ta)]
grade.data <- grade.data[!duplicated(grade.data),]
#identify average of grades
grade.data$avg  <- rowMeans(grade.data[,ta],na.rm =T)
#bridging observations
grade.data$bridges =as.numeric(rowSums(!is.na(grade.data[,ta]))==len)
#identify bridges
g = nrow(grade.data[grade.data$bridges==1,])
#missing observations
grade.data$m = as.numeric((rowSums(is.na(grade.data[,ta])))==g)
#identify traditional score
core1ta<-ifelse(grade.data$grader.assigned==ta[1], grade.data[,ta[1]], NA)
for (i in c(2:len)){
core1ta<-ifelse(grade.data$grader.assigned==ta[i], grade.data[,ta[i]], core1ta)
}
grade.data$corelta <- core1ta
#identify traditional rank
grade.data$coreltapos <-rank(-as.numeric(core1ta), na.last="keep", ties.method= "average")
#Get rank of averages
grade.data$corpos<-rank(grade.data$avg, na.last="keep", ties.method= "average")
return(grade.data)
}
df1 <- bridgr.data(df=df,student=student,grader.assigned=grader.assigned,
grader=grader,grade=grade)
table(df1$bridges)
grade.data = df
if(!class(grade.data$grade) %in% c("integer","numeric")){
cat(message("Error in bridgr.data : object 'grade' not numeric or integer"))
}
#identify the number of graders
grade.data$ta <- as.character(unlist(grade.data$grader))
ta <- unique(grade.data$ta)
len <- length(ta)
#reshape wide
for (i in ta){
grade.data[grade.data$ta==i,i] = grade.data$grade[grade.data$ta==i]
}
for (i in ta){
stdnt = grade.data$student
grd = grade.data[,i]
grd[is.na(grd)]=-1
grade_fill = as.numeric(unlist(
lapply(unique(stdnt),function(i) min(as.numeric(grd[stdnt==i]),na.rm = T))
))
grade_fill[grade_fill %in% c(-1,-Inf,Inf)]=NA
grade.data[,i] = as.numeric(grade_fill[match(grade.data$student,unique(stdnt))])
}
#remove irrelevant columns
grade.data <- grade.data[,c(student,grader.assigned,ta)]
grade.data <- grade.data[!duplicated(grade.data),]
#identify average of grades
grade.data$avg  <- rowMeans(grade.data[,ta],na.rm =T)
#bridging observations
grade.data$bridges =as.numeric(rowSums(!is.na(grade.data[,ta]))==len)
table(grade.data$bridges)
View(grade.data)
grade.data = df
if(!class(grade.data$grade) %in% c("integer","numeric")){
cat(message("Error in bridgr.data : object 'grade' not numeric or integer"))
}
#identify the number of graders
grade.data$ta <- as.character(unlist(grade.data$grader))
ta <- unique(grade.data$ta)
len <- length(ta)
#reshape wide
for (i in ta){
grade.data[grade.data$ta==i,i] = grade.data$grade[grade.data$ta==i]
}
for (i in ta){
stdnt = grade.data$student
grd = grade.data[,i]
grd[is.na(grd)]=-1
grade_fill = as.numeric(unlist(
lapply(unique(stdnt),function(i) min(as.numeric(grd[stdnt==i]),na.rm = T))
))
grade_fill[grade_fill %in% c(-1,-Inf,Inf)]=NA
grade.data[,i] = as.numeric(grade_fill[match(grade.data$student,unique(stdnt))])
}
grade.data = df
if(!class(grade.data$grade) %in% c("integer","numeric")){
cat(message("Error in bridgr.data : object 'grade' not numeric or integer"))
}
#identify the number of graders
grade.data$ta <- as.character(unlist(grade.data$grader))
ta <- unique(grade.data$ta)
len <- length(ta)
View(grade.data)
#reshape wide
for (i in ta){
grade.data[grade.data$ta==i,i] = grade.data$grade[grade.data$ta==i]
}
i="ta1"
stdnt = grade.data$student
grd = grade.data[,i]
grd[is.na(grd)]=-1
grade_fill = as.numeric(unlist(
lapply(unique(stdnt),function(i) min(as.numeric(grd[stdnt==i]),na.rm = T))
))
grade_fill[grade_fill %in% c(-1,-Inf,Inf)]=NA
grade_fill
describe(grade_fill)
library(Hmisc)
describe(grade_fill)
grd
describe(grade_fill)
grade_fill
as.numeric(grade_fill[match(grade.data$student,unique(stdnt))])
describe(as.numeric(grade_fill[match(grade.data$student,unique(stdnt))]))
grade.data[,i]
length(as.numeric(grade_fill[match(grade.data$student,unique(stdnt))]))
grade.data[,i] = as.numeric(grade_fill[match(grade.data$student,unique(stdnt))])
grade.data = df
if(!class(grade.data$grade) %in% c("integer","numeric")){
cat(message("Error in bridgr.data : object 'grade' not numeric or integer"))
}
#identify the number of graders
grade.data$ta <- as.character(unlist(grade.data$grader))
ta <- unique(grade.data$ta)
len <- length(ta)
#reshape wide
for (i in ta){
grade.data[grade.data$ta==i,i] = grade.data$grade[grade.data$ta==i]
}
u
i
for (i in ta){
stdnt = grade.data$student
grd = grade.data[,i]
grd[is.na(grd)]=-1
grade_fill = as.numeric(unlist(
lapply(unique(stdnt),function(i) max(as.numeric(grd[stdnt==i]),na.rm = T))
))
grade_fill[grade_fill %in% c(-1)]=NA
grade.data[,i] = as.numeric(grade_fill[match(grade.data$student,unique(stdnt))])
}
remove.packages("bridgr")
rm(list = ls())
remove.packages("bridgr")
rm(list = ls())
install.packages("C:/Users/Sidak Yntiso/Downloads/bridgr-master/", repos = NULL, type="source")
library(bridgr)
remove.packages("bridgr")
rm(list = ls())
########################################
install.packages("C:/Users/Sidak Yntiso/Downloads/bridgr-master/", repos = NULL, type="source")
library(bridgr)
pre <- bridgr.data(df=bridgr.sim.data,student="student",grader.assigned = "grader.assigned",
grader="grader",grade="grade")
# Pre-packaged
load("bridgr.sim.results")
# Pre-packaged
data("bridgr.sim.results")
post <-  bridgr.eval.post(bridgr.results = results)
post <-  bridgr.eval.post(bridgr.results = bridgr.sim.results)
pre$bridges
table(pre$bridges)
bridgr.results = bridgr.sim.results
results <- data.frame(cbind(bridgr.results$data,
corrected_grades = bridgr.results$corrected_grades,
corrected_ranks = bridgr.results$corrected_ranks))
g = nrow(results[results$data$bridges==1,])
e = ecdf(results$corrected_grades)
g
g = nrow(results[results$bridges==1,])
g
results$bridges
table(results$bridges)
bridgr.sim.results<-bridgr(df=bridgr.sim.data,student="student",grader.assigned = "grader.assigned",
grade="grade",min_grade=NA,max_grade=NA)
bridgr.sim.results$data$bridges
table(bridgr.sim.results$data$bridges)
save(bridgr.sim.results,file="C:\\Users\\Sidak Yntiso\\Downloads\\bridgr.sim.results.RData")
#save(bridgr.sim.results,file="C:\\Users\\Sidak Yntiso\\Downloads\\bridgr.sim.results.RData")
data("bridgr.sim.results")
table(bridgr.sim.results$data$bridges)
remove.packages("bridgr")
rm(list = ls())
install.packages("C:/Users/Sidak Yntiso/Downloads/bridgr-master/", repos = NULL, type="source")
library(bridgr)
bridgr.dat <- bridgr.data(df=bridgr.sim.data,student="student",grader.assigned = "grader.assigned",
grader="grader",grade="grade")
bridgr.eval.bias(bridgr.dat=bridgr.dat)
#save(bridgr.sim.results,file="C:\\Users\\Sidak Yntiso\\Downloads\\bridgr.sim.results.RData")
data("bridgr.sim.results")
post <-  bridgr.eval.post(bridgr.results = bridgr.sim.results)
View(post)
########################################
###2. Update the R documentation     ###
########################################
roxygen2::roxygenise("C:/Users/Sidak Yntiso/Downloads/bridgr-master/",clean = TRUE,
roclets=c('rd', 'collate', 'namespace'))
# Re-structure the input grading dataset.
bridgr.dat <- bridgr.data(df=bridgr.sim.data,student="student",
grader.assigned = "grader.assigned",grader="grader",grade="grade")
# Visualize grading bias using bridging observations
grading.bias.pre = bridgr.eval.bias(bridgr.dat=bridgr.dat,plot=T,tbl=F)
View(bridgr.eval.bias)
bridgr.sim.results
bridgr.sim.results$corrected_grades
names(bridgr.sim.results$corrected_grades)
names(bridgr.sim.results$corrected_grades) = bridgr.sim.results$student_id
names(bridgr.sim.results$corrected_ranks) = bridgr.sim.results$student_id
save(bridgr.sim.results,file="C:\\Users\\Sidak Yntiso\\Downloads\\bridgr.sim.results.RData")
example()
example
example(package="bridgr")
pkgname <- "bridgr"
source(file.path(R.home("share"), "R", "examples-header.R"))
options(warn = 1)
options(pager = "console")
base::assign(".ExTimings", "bridgr-Ex.timings", pos = 'CheckExEnv')
base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
base::assign(".format_ptime",
base::assign(".format_ptime",
function(x) {
if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
options(OutDec = '.')
format(x[1L:3L], digits = 7L)
},
pos = 'CheckExEnv')
base::assign(".format_ptime",
function(x) {
if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
options(OutDec = '.')
format(x[1L:3L], digits = 7L)
},
pos = 'CheckExEnv')
library('bridgr')
base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
cleanEx()
nameEx("bridgr")
### * bridgr
flush(stderr()); flush(stdout())
base::assign(".ptime", proc.time(), pos = "CheckExEnv")
remove.packages("bridgr")
rm(list = ls())
########################################
install.packages("C:/Users/Sidak Yntiso/Downloads/bridgr-master/", repos = NULL, type="source")
library(bridgr)
########################################
###2. Update the R documentation     ###
########################################
roxygen2::roxygenise("C:/Users/Sidak Yntiso/Downloads/bridgr-master/",clean = TRUE,
roclets=c('rd', 'collate', 'namespace'))
mc.cores
########################################
###2. Update the R documentation     ###
########################################
roxygen2::roxygenise("C:/Users/Sidak Yntiso/Downloads/bridgr-master/",clean = TRUE,
roclets=c('rd', 'collate', 'namespace'))
devtools::use_vignette("C:/Users/Sidak Yntiso/Downloads/bridgr-master/README.Rmd")
usethis::use_vignette("bridgr")
setwd("C:/Users/Sidak Yntiso/Downloads/bridgr-master/")
usethis::use_vignette("bridgr")
usethis::use_vignette("README")
########################################
###2. Update the R documentation     ###
########################################
roxygen2::roxygenise("C:/Users/Sidak Yntiso/Downloads/bridgr-master/",clean = TRUE,
roclets=c('rd', 'collate', 'namespace'))
